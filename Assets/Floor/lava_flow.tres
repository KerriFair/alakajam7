[gd_resource type="VisualShader" load_steps=38 format=2]

[ext_resource path="res://Assets/Floor/new_noisetexture.tres" type="Texture" id=1]
[ext_resource path="res://Assets/Floor/lavasphere_diff.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "Direction"

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 10, 10, 10 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0.175, 0.175, 0.175 ), 1, Vector3( 0, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "UV_Scale"

[sub_resource type="VisualShaderNodeColorUniform" id=14]
uniform_name = "Emission"

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=17]

[sub_resource type="VisualShaderNodeColorOp" id=18]
operator = 4

[sub_resource type="VisualShaderNodeColorConstant" id=19]
constant = Color( 0.211765, 0.0313726, 0.0313726, 1 )

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 0

[sub_resource type="VisualShaderNodeVectorOp" id=22]

[sub_resource type="VisualShaderNodeScalarOp" id=23]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=24]

[sub_resource type="VisualShaderNodeInput" id=25]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarOp" id=26]
default_input_values = [ 0, 0.0, 1, 16.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=27]
default_input_values = [ 0, 0.0, 1, 32.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=28]
default_input_values = [ 0, 0.0, 1, 0.01 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=29]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=30]

[sub_resource type="VisualShaderNodeScalarOp" id=31]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=32]

[sub_resource type="VisualShaderNodeInput" id=33]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=34]

[sub_resource type="VisualShaderNodeScalarFunc" id=35]
function = 1

[resource]
code = "shader_type spatial;
render_mode diffuse_toon, specular_toon, unshaded, ensure_correct_normals, vertex_lighting;

uniform float UV_Scale;
uniform sampler2D tex_frg_16;uniform float Speed;
uniform float Direction;
uniform sampler2D tex_frg_3;uniform vec4 Emission : hint_color;



void vertex() {
// Input:21
	float n_out21p0;
	n_out21p0 = TIME;

// ScalarOp:23
	float n_in23p1 = 0.05000;
	float n_out23p0;
	n_out23p0 = n_out21p0 * n_in23p1;

// Input:4
	vec3 n_out4p0;
	n_out4p0 = VERTEX;

// VectorDecompose:5
	float n_out5p0;
	float n_out5p1;
	float n_out5p2;
	n_out5p0 = n_out4p0.x;
	n_out5p1 = n_out4p0.y;
	n_out5p2 = n_out4p0.z;

// ScalarOp:22
	float n_out22p0;
	n_out22p0 = n_out23p0 + n_out5p0;

// ScalarOp:18
	float n_in18p1 = 16.00000;
	float n_out18p0;
	n_out18p0 = n_out22p0 * n_in18p1;

// ScalarFunc:7
	float n_out7p0;
	n_out7p0 = cos(n_out18p0);

// ScalarOp:24
	float n_out24p0;
	n_out24p0 = n_out23p0 + n_out5p2;

// ScalarOp:19
	float n_in19p1 = 32.00000;
	float n_out19p0;
	n_out19p0 = n_out24p0 * n_in19p1;

// ScalarFunc:10
	float n_out10p0;
	n_out10p0 = sin(n_out19p0);

// ScalarOp:15
	float n_out15p0;
	n_out15p0 = n_out7p0 * n_out10p0;

// ScalarOp:20
	float n_in20p1 = 0.01000;
	float n_out20p0;
	n_out20p0 = n_out15p0 * n_in20p1;

// VectorCompose:16
	float n_in16p0 = 0.00000;
	float n_in16p2 = 0.00000;
	vec3 n_out16p0;
	n_out16p0 = vec3( n_in16p0 , n_out20p0 , n_in16p2 );

// Input:17
	vec3 n_out17p0;
	n_out17p0 = VERTEX;

// VectorOp:14
	vec3 n_out14p0;
	n_out14p0 = n_out16p0 + n_out17p0;

// Output:0
	VERTEX = n_out14p0;

}

void fragment() {
// Input:17
	vec3 n_out17p0;
	n_out17p0 = vec3(UV,0.0);

// ScalarUniform:22
	float n_out22p0;
	n_out22p0 = UV_Scale;

// VectorCompose:21
	vec3 n_out21p0;
	n_out21p0 = vec3( n_out22p0 , n_out22p0 , n_out22p0 );

// VectorOp:20
	vec3 n_in20p0 = vec3(0.17500,0.17500,0.17500);
	vec3 n_out20p0;
	n_out20p0 = n_in20p0 * n_out21p0;

// VectorOp:19
	vec3 n_out19p0;
	n_out19p0 = n_out17p0 * n_out20p0;

// Texture:16
	vec3 n_out16p0;
	float n_out16p1;
	vec4 tex_frg_16_read = texture( tex_frg_16 , n_out19p0.xy );
	n_out16p0 = tex_frg_16_read.rgb;
	n_out16p1 = tex_frg_16_read.a;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// VectorOp:4
	vec3 n_out4p0;
	n_out4p0 = n_out2p0 * n_out21p0;

// VectorOp:18
	vec3 n_out18p0;
	n_out18p0 = n_out16p0 + n_out4p0;

// Input:9
	float n_out9p0;
	n_out9p0 = TIME;

// ScalarUniform:12
	float n_out12p0;
	n_out12p0 = Speed;

// ScalarOp:11
	float n_out11p0;
	n_out11p0 = n_out9p0 * n_out12p0;

// ScalarUniform:14
	float n_out14p0;
	n_out14p0 = Direction;

// ScalarOp:13
	float n_out13p0;
	n_out13p0 = n_out11p0 * n_out14p0;

// VectorCompose:10
	vec3 n_out10p0;
	n_out10p0 = vec3( n_out13p0 , n_out13p0 , n_out13p0 );

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out18p0 + n_out10p0;

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	vec4 tex_frg_3_read = texture( tex_frg_3 , n_out5p0.xy );
	n_out3p0 = tex_frg_3_read.rgb;
	n_out3p1 = tex_frg_3_read.a;

// Color:8
	vec3 n_out8p0;
	float n_out8p1;
	n_out8p0 = vec3(0.211765,0.031373,0.031373);
	n_out8p1 = 1.000000;

// ColorOp:7
	vec3 n_out7p0;
	{
		float base=n_out3p0.x;
		float blend=n_out8p0.x;
		if (base < 0.5) {
			n_out7p0.x = 2.0 * base * blend;
		} else {
			n_out7p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out3p0.y;
		float blend=n_out8p0.y;
		if (base < 0.5) {
			n_out7p0.y = 2.0 * base * blend;
		} else {
			n_out7p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out3p0.z;
		float blend=n_out8p0.z;
		if (base < 0.5) {
			n_out7p0.z = 2.0 * base * blend;
		} else {
			n_out7p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ColorUniform:23
	vec3 n_out23p0;
	float n_out23p1;
	n_out23p0 = Emission.rgb;
	n_out23p1 = Emission.a;

// Output:0
	ALBEDO = n_out7p0;
	EMISSION = n_out23p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -888.121, -93.5 )
modes/diffuse = 4
modes/specular = 3
flags/ensure_correct_normals = true
flags/unshaded = true
flags/vertex_lighting = true
nodes/vertex/0/position = Vector2( 1240, -100 )
nodes/vertex/4/node = SubResource( 33 )
nodes/vertex/4/position = Vector2( -420, 20 )
nodes/vertex/5/node = SubResource( 34 )
nodes/vertex/5/position = Vector2( -260, 20 )
nodes/vertex/7/node = SubResource( 35 )
nodes/vertex/7/position = Vector2( 320, -100 )
nodes/vertex/10/node = SubResource( 21 )
nodes/vertex/10/position = Vector2( 320, -20 )
nodes/vertex/14/node = SubResource( 22 )
nodes/vertex/14/position = Vector2( 1060, -100 )
nodes/vertex/15/node = SubResource( 23 )
nodes/vertex/15/position = Vector2( 500, -100 )
nodes/vertex/16/node = SubResource( 24 )
nodes/vertex/16/position = Vector2( 860, -100 )
nodes/vertex/17/node = SubResource( 25 )
nodes/vertex/17/position = Vector2( 900, 20 )
nodes/vertex/18/node = SubResource( 26 )
nodes/vertex/18/position = Vector2( 140, -100 )
nodes/vertex/19/node = SubResource( 27 )
nodes/vertex/19/position = Vector2( 140, 20 )
nodes/vertex/20/node = SubResource( 28 )
nodes/vertex/20/position = Vector2( 680, -100 )
nodes/vertex/21/node = SubResource( 29 )
nodes/vertex/21/position = Vector2( -380, -100 )
nodes/vertex/22/node = SubResource( 30 )
nodes/vertex/22/position = Vector2( -40, -100 )
nodes/vertex/23/node = SubResource( 31 )
nodes/vertex/23/position = Vector2( -220, -100 )
nodes/vertex/24/node = SubResource( 32 )
nodes/vertex/24/position = Vector2( -40, 20 )
nodes/vertex/connections = PoolIntArray( 20, 0, 16, 1, 16, 0, 14, 0, 17, 0, 14, 1, 15, 0, 20, 0, 10, 0, 15, 1, 7, 0, 15, 0, 19, 0, 10, 0, 18, 0, 7, 0, 4, 0, 5, 0, 14, 0, 0, 0, 22, 0, 18, 0, 21, 0, 23, 0, 23, 0, 22, 0, 5, 0, 22, 1, 23, 0, 24, 0, 5, 2, 24, 1, 24, 0, 19, 0 )
nodes/fragment/0/position = Vector2( 580, 160 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -480, 160 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( 220, 160 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( -320, 160 )
nodes/fragment/5/node = SubResource( 17 )
nodes/fragment/5/position = Vector2( 40, 160 )
nodes/fragment/7/node = SubResource( 18 )
nodes/fragment/7/position = Vector2( 400, 160 )
nodes/fragment/8/node = SubResource( 19 )
nodes/fragment/8/position = Vector2( 260, 380 )
nodes/fragment/9/node = SubResource( 20 )
nodes/fragment/9/position = Vector2( -700, 320 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -160, 280 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -520, 320 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -720, 400 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -340, 320 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -540, 440 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -320, -60 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( -660, -60 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( -140, 160 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( -500, -60 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -720, 20 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( -880, 180 )
nodes/fragment/22/node = SubResource( 13 )
nodes/fragment/22/position = Vector2( -1080, 180 )
nodes/fragment/23/node = SubResource( 14 )
nodes/fragment/23/position = Vector2( 400, 280 )
nodes/fragment/connections = PoolIntArray( 3, 0, 7, 0, 7, 0, 0, 0, 8, 0, 7, 1, 9, 0, 11, 0, 12, 0, 11, 1, 11, 0, 13, 0, 13, 0, 10, 0, 13, 0, 10, 1, 13, 0, 10, 2, 14, 0, 13, 1, 10, 0, 5, 1, 5, 0, 3, 0, 2, 0, 4, 0, 4, 0, 18, 1, 17, 0, 19, 0, 19, 0, 16, 0, 16, 0, 18, 0, 18, 0, 5, 0, 20, 0, 19, 1, 21, 0, 4, 1, 21, 0, 20, 1, 22, 0, 21, 0, 22, 0, 21, 1, 22, 0, 21, 2, 23, 0, 0, 5 )
